package com.example.newapp;

import java.util.Random;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.Animation;
import android.view.animation.TranslateAnimation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.RelativeLayout.LayoutParams;

public class GameSpace extends Activity {
	 
	 	RelativeLayout shapeLayout, flipLayout, sizeLayout, countLayout;
		ImageView[] imageArr;
		int size = 100;
		int right_ind;
		int right_id;
		TextView count;
		
	@Override 
	    public void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.game_space);
	        layouts();
	        gameShapeStart();
	 }
	
	public void swapLay(final RelativeLayout x, final RelativeLayout y)
	{
		Animation anim = AnimationUtils.loadAnimation(this, R.anim.slide_left_out);
		Animation anim1 = AnimationUtils.loadAnimation(this, R.anim.slide_left_in);
		anim.setAnimationListener(new AnimationListener(){

			public void onAnimationEnd(Animation animation) {
				x.setBackgroundResource(0);
				x.removeAllViews();
				
			}

			public void onAnimationRepeat(Animation animation) {
				// TODO Auto-generated method stub
				
			}

			public void onAnimationStart(Animation animation) {
				// TODO Auto-generated method stub
			}
			
		});
		x.startAnimation(anim);
		y.startAnimation(anim1);
		
	}
	
	public void layouts()
	{
		shapeLayout = (RelativeLayout) findViewById(R.id.shapeLay);
		flipLayout = (RelativeLayout) findViewById(R.id.flipLay);
		sizeLayout = (RelativeLayout) findViewById(R.id.sizeLay);
		countLayout = (RelativeLayout) findViewById(R.id.countLay);
		shapeLayout.bringToFront();
	}
	
	//Games starting
	
	public void gameCountStart()
	{
		countLayout.setBackgroundResource(R.drawable.bg_games2);
		Random r = new Random();
        int obj_count = 3+r.nextInt(4);
        count = new TextView(this);
        count.setText("0");
        countLayout.addView(count);        
        RelativeLayout.LayoutParams objParam[] = new RelativeLayout.LayoutParams[obj_count];
        imageArr = new ImageView[obj_count];
        
        int collect[] = new int[20];
        collect[0] = R.drawable.o_album_en;
        for(int i =1; i<20; i++)
        	collect[i] = collect[i-1] +1;
        
        int instx=5, insty=100;
        for (int i=0; i<obj_count; i++)
        {	
        	objParam[i] = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        	objParam[i].width = size;
            objParam[i].height = size;
            objParam[i].leftMargin = instx;
        	objParam[i].topMargin = insty;
        	imageArr[i] = new ImageView(this);
        	r = new Random();
        	int q = r.nextInt(20);
        	while (collect[q]==0)
        		q = r.nextInt(20);
        	imageArr[i].setBackgroundResource(collect[q]);
        	collect[q] = 0;
        	imageArr[i].setId(i+1);
        	countLayout.addView(imageArr[i],objParam[i]);
        	imageArr[i].setOnClickListener(countListener);
        	instx += objParam[i].width+5;
        }
	}
	
	public void gameShapeStart()
	 {
		shapeLayout.setBackgroundResource(R.drawable.bg_games1);
	        RelativeLayout.LayoutParams objParam[] = new RelativeLayout.LayoutParams[6];
	        imageArr = new ImageView[6];
	        
	        int collect[] = new int[6];
	        collect[0] = R.drawable.p_games_shapecircle;
	        for(int i =1; i<6; i++)
	        	collect[i] = collect[i-1] +1;
	        Random r = new Random();
	        right_ind = r.nextInt(6);
	        TextView text = new TextView(this);
	        //text.setLeft(400);
	        //text.setTop(20);
	        shapeLayout.addView(text);
	        int instx=200, insty=100;
	        for (int i=0; i<6; i++)
	        {	
	        	if (i == 3)
	        	{
	        		insty+=size+5;
	        		instx = 200;
	        	}
	        	objParam[i] = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
	        	objParam[i].width = size;
	            objParam[i].height = size;
	            objParam[i].leftMargin = instx;
	        	objParam[i].topMargin = insty;
	        	imageArr[i] = new ImageView(this);
	        	r = new Random();
	        	int q = r.nextInt(6);
	        	while (collect[q]==0)
	        		q = r.nextInt(6);
	        	imageArr[i].setId(i+1);
	        	imageArr[i].setBackgroundResource(collect[q]);
	        	if (q == right_ind)
	        		right_id = imageArr[i].getId();
	        	collect[q] = 0;
	        	shapeLayout.addView(imageArr[i],objParam[i]);
	        	imageArr[i].setOnClickListener(shapeListener);
	        	instx += objParam[i].width+5;
	        }
	        switch (right_ind)
	        {
	        	case 0:
	        		text.setText("Circle");
	        		break;
	        	case 1:
	        		text.setText("Diamond");
	        		break;
	        	case 2:
	        		text.setText("Heart");
	        		break;
	        	case 3:
	        		text.setText("Square");
	        		break;
	        	case 4:
	        		text.setText("Star");
	        		break;
	        	case 5:
	        		text.setText("Triangle");
	        		break;
	        }
	        //text.setText(text.getText() + String.valueOf(right_ind) + String.valueOf(right_id));
	        instx = 0; 
	 }
	
	public void gameSizeStart()
	{
		final int x0,y0, hiding;
		final int x_cord;
		final int y_cord;
		final int x_in=0, y_in=0;
		final boolean drag = false;
		final boolean x = false;
		final boolean agree = true;
		final int action = 0;
		final int pointerId = 0;
		final int win = 0;
		final Animation anim;
		final int changeCordsX;
		final int changeCordsY;
		final LayoutParams lp;
		final RelativeLayout.LayoutParams localparams;
		
		final int[][] instArr = new int[3][2];
		int collect[] = new int[20];
        collect[0] = R.drawable.o_album_en;
        for(int i =1; i<20; i++)
        	collect[i] = collect[i-1] +1;
        
        final int half = (int) size/2;
        final ImageView localBox = new ImageView(this);
        RelativeLayout myLayout = (RelativeLayout) findViewById(R.id.Rlay2); 
        
        RelativeLayout.LayoutParams objParam[] = new RelativeLayout.LayoutParams[3];
        final ImageView[] imageArr = new ImageView[3];
        RelativeLayout.LayoutParams boxParam[] = new RelativeLayout.LayoutParams[3];
        ImageView[] boxArr = new ImageView[3];
        
        
        int instx=5, insty=100;
        for (int i=0; i<3; i++)
        {	
        	//instArr[i][0] = instx;
        	//instArr[i][1] = insty;
        	objParam[i] = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
            objParam[i].leftMargin = instx;
        	objParam[i].topMargin = insty;
        	
        	imageArr[i] = new ImageView(this);
        	Random r = new Random();
        	int q = r.nextInt(20);
        	while (collect[q]==0)
        		q = r.nextInt(20);
        	imageArr[i].setBackgroundResource(collect[q]);
        	collect[q] = 0;
        	imageArr[i].setId(i+1);
        	myLayout.addView(imageArr[i],objParam[i]);
        	imageArr[i].setOnTouchListener(sizeListener);
        	
        	boxParam[i] = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
        	boxArr[i] = new ImageView(this);
        	boxArr[i].setId((i+1)*10);
        	//boxArr[i].setBackgroundColor(Color.BLACK);
        	myLayout.addView(boxArr[i],boxParam[i]);
        	
        	instx += objParam[i].width+5;
        	//insty += 51;
        }
        ImageView mainBox = (ImageView) findViewById(R.id.mainbox); 
        LayoutParams mainBoxParam = (LayoutParams) mainBox.getLayoutParams();
        objParam[0].width = 80;
        objParam[0].height = 80;
        objParam[1].width = 105;
        objParam[1].height = 105;
        objParam[2].width = 120;
        objParam[2].height = 120;
        objParam[0].leftMargin = 100;
        objParam[0].topMargin = 100;
        objParam[1].leftMargin = 205;
        objParam[1].topMargin = 100;
        objParam[2].leftMargin = 100;
        objParam[2].topMargin = 205;
        
        boxParam[0].width =  92;
        boxParam[0].height = 92;
        boxParam[1].width = 110;
        boxParam[1].height = 110;
        boxParam[2].width = 130;
        boxParam[2].height = 130;
        boxParam[0].leftMargin = mainBoxParam.leftMargin + 40 -10;
        boxParam[0].topMargin = mainBoxParam.topMargin + 82  -10;
        boxParam[1].leftMargin = mainBoxParam.leftMargin + 163  -10;
        boxParam[1].topMargin = mainBoxParam.topMargin + 58  -10;
        boxParam[2].leftMargin = mainBoxParam.leftMargin + 313  -10;
        boxParam[2].topMargin = mainBoxParam.topMargin + 33  -10;
        
        for (int i=0; i<3; i++)
        {	
        	instArr[i][0] = objParam[i].leftMargin;
        	instArr[i][1] = objParam[i].topMargin;
        }
        
        final AnimationListener animListener = new AnimationListener(){

			public void onAnimationEnd(Animation animation) {
				ImageView localimage = (ImageView) findViewById(hiding);
		        localimage.setLayoutParams(localparams);
		        localimage.requestLayout();
		    	Log.v("END!", "!!!");
		    	for (int i=0; i<3; i++)
					  imageArr[i].setOnTouchListener(GameSpace.this);
		    	if (x)
		    	{
		    	win++;
				  if (win == 3)
				  {
					  //myLayout.setBackgroundResource(0);
				  }
		    	}
		    	anim = null;
		    	agree = true;
			}

			public void onAnimationRepeat(
					Animation animation) {
				// TODO Auto-generated method stub
				
			}

			public void onAnimationStart(Animation animation) {
				// TODO Auto-generated method stub
				
			}
			  
		  };
        
        OnTouchListener sizeListener = new OnTouchListener(){

			public boolean onTouch(View v, MotionEvent event) {
				if (agree)
				{
				
				Log.v("touch", String.valueOf(event.getPointerId(0)));
				Log.v("touch2", String.valueOf(event.getActionIndex()));
				Log.v("touch3", String.valueOf(event.getPointerCount()));
				//if (event.getPointerId(0)==0)
				switch(event.getAction())
			      {
			      case MotionEvent.ACTION_DOWN:
			    	  changeCordsX = (int) event.getRawX();
			    	  changeCordsY = (int) event.getRawY();
			    	  pointerId = event.getPointerId(0);
			    	  action = 1;
			    	  lp = (LayoutParams) v.getLayoutParams();
			    	  drag = true;
			    	  x0 = (int)(event.getRawX()) - v.getLeft() - (int)(event.getX());
			    	  y0 = (int)(event.getRawY()) - v.getTop() - (int)(event.getY());
			    	  x_in = (int) event.getX();
			    	  y_in = (int) event.getY();
			    	  localBox = (ImageView) findViewById(v.getId()*10);
			    	  Log.v("down", String.valueOf(x_in)+" "+String.valueOf(y_in));
			    	  v.bringToFront();
			    	  break;
			      case MotionEvent.ACTION_MOVE:
			    	  if (agree)
			    	  {
			    		 if (action == 1)
			    		 {
			    		 Log.v("moving", String.valueOf(x_cord)+" "+String.valueOf(y_cord));
			    		 x_cord = (int)event.getRawX()-x0;
			    		 y_cord = (int)event.getRawY()-y0;
			    		 x_cord-=x_in;
			    		 y_cord-=y_in;
			    		 //if (!((x_cord+half>localBox.getLeft())&&(x_cord+half<localBox.getRight())&&(y_cord+half>localBox.getTop())&&(y_cord+half<localBox.getBottom())))
			    		 //	 localBox.setBackgroundColor(clr[v.getId()-1]);
			    		 //else
			    		 //localBox.setBackgroundColor(Color.RED);
			    		 if (x_cord<x0)
			    			 x_cord = x0;
			    		 if (x_cord+(int)(v.getWidth())>sizeLayout.getWidth())
			    			 x_cord = sizeLayout.getWidth() - v.getWidth();
			    		 if (y_cord<0)
			    			 y_cord = 0;
			    		 if (y_cord+(int)(v.getHeight())>sizeLayout.getHeight())
			    			 y_cord = sizeLayout.getHeight()-v.getHeight();
			    		 lp.leftMargin = x_cord;
			    		 lp.topMargin = y_cord;

			    		 v.setLayoutParams(lp);
			    		 v.invalidate();
			    		 v.bringToFront();
			    		 }
			    	  }
			          break;
			      case MotionEvent.ACTION_POINTER_UP:
			    	  if ((event.getPointerId(event.getActionIndex()) == pointerId)&&(changeCordsX!=(int) event.getRawX())&&(changeCordsY!=(int) event.getRawY()))
			    	  {
			    		  pointerId = 999;  
				    	  drag = false;
			    		  Log.v("Animation", String.valueOf(localBox.getLeft()+" "+String.valueOf(localBox.getTop())));
			    		  Log.v("Animation", String.valueOf(event.getRawX()-x_in-x0)+" "+ String.valueOf(event.getRawY()-y_in-y0));
			    		  Log.v("Bug", String.valueOf(localBox.getLeft()-event.getRawX()+x_in+x0)+" "+String.valueOf(localBox.getTop()-event.getRawY()+y_in+y0));
				    	  if ((x_cord+half>localBox.getLeft())&&(x_cord+half<localBox.getRight())&&(y_cord+half>localBox.getTop())&&(y_cord+half<localBox.getBottom()))
				    	  {
				    		  x = true;
				    		  localparams = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
				    		  localparams = (LayoutParams) v.getLayoutParams();
				    		  localparams.leftMargin = (int) (localBox.getLeft())+5;
				    		  localparams.topMargin = (int) (localBox.getTop())+5;
				    		  anim = new TranslateAnimation(0, localBox.getLeft()-x_cord+5, 0, localBox.getTop()-y_cord+5);
				    		  anim.setDuration(200);
				    		  anim.setFillEnabled(true);
				    		  //anim.setFillAfter(true);
				    		  hiding = v.getId();
				    		  anim.setAnimationListener(animListener);
				    		  agree = false;
				    		  v.startAnimation(anim);
				    		  anim = null;
				    		  v.setOnTouchListener(null);
				    		  imageArr[v.getId()-1] = new ImageView(GameSpace.this);
				    		  
				    	  }
				    	  else
				    	  {
				    		  x = false;
				    		  anim = new TranslateAnimation(0, instArr[v.getId()-1][0]-x_cord, 0, instArr[v.getId()-1][1]-y_cord);
				    		  anim.setDuration(200);
				    		  anim.setFillEnabled(true);
				    		  //anim.setFillAfter(true);
				    		  hiding = v.getId();
				    		  localparams = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
				    		  localparams = (LayoutParams) v.getLayoutParams();
				    		  localparams.leftMargin = (int) (instArr[v.getId()-1][0]);
				    		  localparams.topMargin = (int) (instArr[v.getId()-1][1]);
				    		  agree = false;
				    		  anim.setAnimationListener(animListener);
				    		  for (int i=0; i<3; i++)
				    			  imageArr[i].setOnTouchListener(null);
				    		  anim.reset();
				    		  v.startAnimation(anim);
				    		  v.setOnTouchListener(this);
				    		  v.bringToFront();
				    	  }
			    	  }
			    	  break;
			      case MotionEvent.ACTION_UP:
			    	  if ((event.getPointerId(event.getActionIndex()) == pointerId)&&(changeCordsX!=(int) event.getRawX())&&(changeCordsY!=(int) event.getRawY()))
			    	  {
			    	  pointerId = 999;  
			    	  drag = false;
		    		  Log.v("Animation", String.valueOf(localBox.getLeft()+" "+String.valueOf(localBox.getTop())));
		    		  Log.v("Animation", String.valueOf(event.getRawX()-x_in-x0)+" "+ String.valueOf(event.getRawY()-y_in-y0));
		    		  Log.v("Bug", String.valueOf(localBox.getLeft()-event.getRawX()+x_in+x0)+" "+String.valueOf(localBox.getTop()-event.getRawY()+y_in+y0));
			    	  if ((x_cord+half>localBox.getLeft())&&(x_cord+half<localBox.getRight())&&(y_cord+half>localBox.getTop())&&(y_cord+half<localBox.getBottom()))
			    	  {
			    		  x = true;
			    		  localparams = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			    		  localparams = (LayoutParams) v.getLayoutParams();
			    		  localparams.leftMargin = (int) (localBox.getLeft())+5;
			    		  localparams.topMargin = (int) (localBox.getTop())+5;
			    		  anim = new TranslateAnimation(0, localBox.getLeft()-x_cord+5, 0, localBox.getTop()-y_cord+5);
			    		  anim.setDuration(200);
			    		  anim.setFillEnabled(true);
			    		  //anim.setFillAfter(true);
			    		  hiding = v.getId();
			    		  anim.setAnimationListener(animListener);
			    		  agree = false;
			    		  v.startAnimation(anim);
			    		  anim = null;
			    		  v.setOnTouchListener(null);
			    		  imageArr[v.getId()-1] = new ImageView(GameSpace.this);
			    		  
			    	  }
			    	  else
			    	  {
			    		  x = false;
			    		  anim = new TranslateAnimation(0, instArr[v.getId()-1][0]-x_cord, 0, instArr[v.getId()-1][1]-y_cord);
			    		  anim.setDuration(200);
			    		  anim.setFillEnabled(true);
			    		  //anim.setFillAfter(true);
			    		  hiding = v.getId();
			    		  localparams = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			    		  localparams = (LayoutParams) v.getLayoutParams();
			    		  localparams.leftMargin = (int) (instArr[v.getId()-1][0]);
			    		  localparams.topMargin = (int) (instArr[v.getId()-1][1]);
			    		  agree = false;
			    		  anim.setAnimationListener(animListener);
			    		  for (int i=0; i<3; i++)
			    			  imageArr[i].setOnTouchListener(null);
			    		  anim.reset();
			    		  v.startAnimation(anim);
			    		  v.setOnTouchListener(this);
			    		  v.bringToFront();
			    	  }
			    	  }
			    	  break;
			             default : action = 0; break;
			      }
				}
				return true;
			}
        	
        };
        
	}
	
	//LISTENERS:
	
	OnClickListener shapeListener = new OnClickListener() {
	       public void onClick(View v) 
	       {
	    	   Log.v("Touch", String.valueOf(v.getId()));
	    	   	if (v.getId() == right_id)
	   			{
	   				Animation anim = AnimationUtils.loadAnimation(GameSpace.this, R.anim.shapewin);
	   				v.startAnimation(anim);
	   				swapLay(shapeLayout, countLayout);
	   				gameCountStart();
	   			}
	   			else
	   			{
	   				Animation anim = AnimationUtils.loadAnimation(GameSpace.this, R.anim.slide_right_in);
	   				anim.setRepeatCount(3);
	   				anim.setRepeatMode(Animation.REVERSE);
	   				v.startAnimation(anim);
	   			}
	      }
	 };
	 
	 OnClickListener countListener = new OnClickListener(){

		public void onClick(View v) 
		{			
			v.setVisibility(View.GONE);
			int x = Integer.parseInt((String) count.getText());
			x++;
			count.setText(String.valueOf(x));
			if (x == obj_count)
			  {
			      swapLay(countLayout, sizeLayout);
			  }
		}
		 
	 };
	 
}
